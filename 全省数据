由于我们是通过网络接口来获取全国省市县数据，因此必须要添加网络访问权限。

用 Android Studio 打开实训项目。在 Android 模式目录下找到 AndroidManifest.xml 文件，打开并在其中添加如下权限声明代码：

<uses-permission android:name="android.permission.INTERNET" />
添加位置如图 22 所示：



图2 权限声明添加位置
添加与服务器交互的代码
根据之前的介绍，OkHttp 在接口封装上做得简单易用，是广大 Android 开发者的首选网络通信库，因此这里我们选用 OkHttp 来实现。

在之前的实训中我们已经在 build.gradle 文件中添加了 OkHttp3 的依赖。此处可以直接进行编码。

在 com.coolweather.android/util 包下新建一个 HttpUtil 类（如果 util 不存在，可以再新建），并添加如下代码：

public class HttpUtil {
    // 使用OkHttp创建一个访问服务区数据的工具类
    public static void sendOkHttpRequest(String address, okhttp3.Callback callback) {
        OkHttpClient client = new OkHttpClient();    // 创建 OKHttpClient 对象
        Request request = new Request.Builder().url(address).build();    // 解析请求地址
        client.newCall(request).enqueue(callback);    // 注册用于处理服务器相应的回调
    }
}
如果代码报红，可以把鼠标放到代码左侧，然后通过 Alt+Enter，进行导包操作。



图3 快捷键导包
以上代码仅仅使用 33 行就完成了和服务器的交互，可见 OkHttp 的封装是非常出色的。现在发起一条 HTTP 请求就只需要调用 sendOkHttpRequest() 方法即可。

解析 JSON 格式数据
由于服务器返回的数据都是 JSON 格式的，所以需要一个工具类来解析和处理这类数据。

在 util 包下新建一个 Utility 类，添加如下代码：

public class Utility {
    /**
     * 解析和处理服务器返回的省级数据
     */
    public static boolean handleProvinceResponse(String response) {
        if (!TextUtils.isEmpty(response)) {  // 数据非空
            try {
                JSONArray allProvinces = new JSONArray(response);   // 创建一个用于解析的 JSON 数组
                for (int i = 0; i < allProvinces.length(); i++) {
                    JSONObject provinceObject = allProvinces.getJSONObject(i);  // 获取每一个 JSON 对象
                    Province province = new Province();
                    province.setProvinceName(provinceObject.getString("name")); // 将 JSON 对象中的 name 字段赋给 ProvinceName
                    province.setProvinceCode(provinceObject.getInt("id"));  // 将 JSON 对象中的 id 字段赋给 ProvinceCode
                    province.save(); // 将数据存到数据库中
                }
                return true;
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
        return false;
    }
    /**
     * 解析和处理服务器返回的市级数据
     */
    public static boolean handleCityResponse(String response, int provinceId) {
        if (!TextUtils.isEmpty(response)) {
            try {
                JSONArray allCity = new JSONArray(response);
                for (int i = 0; i < allCity.length(); i++) {
                    JSONObject cityObject = allCity.getJSONObject(i);
                    City city = new City();
                    city.setCityName(cityObject.getString("name"));
                    city.setCityCode(cityObject.getInt("id"));
                    city.setProvinceId(provinceId);
                    city.save();
                }
                return true;
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
        return false;
    }
    /**
     * 解析和处理服务器返回的县级数据
     */
    public static boolean handleCountyResponse(String response, int cityId) {
        if (!TextUtils.isEmpty(response)) {
            try {
                JSONArray allCounties = new JSONArray(response);
                for (int i = 0; i < allCounties.length(); i++) {
                    JSONObject countyObject = allCounties.getJSONObject(i);
                    County county = new County();
                    county.setCountyName(countyObject.getString("name"));
                    county.setWeatherId(countyObject.getString("weather_id"));
                    county.setCityId(cityId);
                    county.save();
                }
                return true;
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
        return false;
    }
}

————————————————————————————————————————————————————————————————————————————————————————————————————————————————-


第二关

新建 choose_area.xml 
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical" android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#FFF">
    <!-- 定义头布局 -->
    <RelativeLayout
        android:layout_width="match_parent"
        android:layout_height="?attr/actionBarSize"
        android:background="?attr/colorPrimary">
        <!-- 显示标题内容 -->
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:id="@+id/title_text"
            android:layout_centerInParent="true"
            android:textColor="#FFF"
            android:textSize="20sp"/>
        <!-- 执行返回操作的按钮 -->
        <Button
            android:layout_width="25dp"
            android:layout_height="25dp"
            android:layout_marginLeft="10dp"
            android:id="@+id/back_button"
            android:background="@drawable/ic_back"
            android:layout_alignParentLeft="true"
            android:layout_centerVertical="true"/>
    </RelativeLayout>
    <!-- 显示省市县的数据 -->
    <ListView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:id="@+id/list_view"/>
</LinearLayout>
——————————————————————————————————————————————————————————————

这行代码是用来设置 Button 的背景，需要准备一张背景图片。用系统的文件管理器打开项目所在目录可以看到我们已经准备好了一张名为 ic_back.png 的图片。你只需要将其拖动到 AS 中 app/res/drawable文件夹下，并在 AS 弹出的对话框中选择 OK 即可。



图3 添加图片
可以看到 ic_back.png 文件已经出现在 res/drawable 目录下，而且布局文件中的红色错误也已经消失了。

编写遍历省市县的碎片
在 app/java/com.coolweather.android 目录下新建 ChooseAreaFragment ，其父类为 Fragment ，在其中添加如下代码：

public class ChooseAreaFragment extends Fragment {
    /**
     * 宏定义试图的不同级别
     */
    public static final int LEVEL_PROVINCE = 0;
    public static final int LEVEL_CITY = 1;
    public static final int LEVEL_COUNTY = 2;
    /**
     * 准备一些控件
     */
    private ProgressDialog progressDialog;
    private TextView titleText;
    private Button backButton;
    private ListView listView;
    private ArrayAdapter<String> adapter;
    private List<String> dataList = new ArrayList<>();
    /**
     * 省、市、县的列表
     */
    private List<Province> provinceList;
    private List<City> cityList;
    private List<County> countyList;
    // 选中的省
    private Province selectedProvince;
    // 选中的市
    private City selectedCity;
    // 当前选中的级别
    private int currentLevel;
    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.choose_area, container, false);
        titleText = view.findViewById(R.id.title_text);
        backButton = view.findViewById(R.id.back_button);
        listView = view.findViewById(R.id.list_view);   //获取控件的实例
        adapter = new ArrayAdapter<>(getContext(), android.R.layout.simple_list_item_1, dataList);  //初始化 ArrayAdapter
        listView.setAdapter(adapter);
        return view;
    }
    @Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        // 设置 ListView 和 Button 的点击事件
        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                if (currentLevel == LEVEL_PROVINCE) {
                    selectedProvince = provinceList.get(position);
                    queryCities();
                } else if (currentLevel == LEVEL_CITY) {
                    selectedCity = cityList.get(position);
                    queryCounties();
                }
            }
        });
        backButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (currentLevel == LEVEL_COUNTY) {
                    queryCities();
                } else if (currentLevel == LEVEL_CITY) {
                    queryProvinces();
                }
            }
        });
        queryProvinces();   // 加载省级数据
    }
    /**
     * 查询全国所有的省，优先从数据库中查，如果没有查询到再到服务器上查
     */
    private void queryProvinces() {
        titleText.setText("中国");    // 设置头布局标题
        backButton.setVisibility(View.GONE);    // 隐藏返回按钮
        provinceList = DataSupport.findAll(Province.class); // 调用 LitePal 查询接口来从数据库中读取省级数据
        if (provinceList.size() > 0) {  // 读到了则显示到界面上
            dataList.clear();
            for (Province province : provinceList) {
                dataList.add(province.getProvinceName());
            }
            adapter.notifyDataSetChanged();
            listView.setSelection(0);
            currentLevel = LEVEL_PROVINCE;
        } else {    // 没有读到则从服务器上获取
            String address = "http://guolin.tech/api/china";    // 请求地址
            queryFromServer(address, "province");   // 后面会定义此方法
        }
    }
    /**
     * 查询选中县内所有的市，优先从数据库中查，如果没有查询到再到服务器上查
     */
    private void queryCities() {
        titleText.setText(selectedProvince.getProvinceName());
        backButton.setVisibility(View.VISIBLE);
        cityList = DataSupport.where("provinceId=?", String.valueOf(selectedProvince.getId()))
                .find(City.class);
        if (cityList.size() > 0) {
            dataList.clear();
            for (City city : cityList) {
                dataList.add(city.getCityName());
            }
            adapter.notifyDataSetChanged();
            listView.setSelection(0);
            currentLevel = LEVEL_CITY;
        } else {
            int provinceCode = selectedProvince.getProvinceCode();
            String address = "http://guolin.tech/api/china/" + provinceCode;
            queryFromServer(address, "city");
        }
    }
    /**
     * 查询选中市内所有的县，优先从数据库中查询，如果没有查询到就从服务器中查询数据
     */
    private void queryCounties() {
        titleText.setText(selectedCity.getCityName());
        backButton.setVisibility(View.VISIBLE);
        countyList = DataSupport.where("cityid=?", String.valueOf(selectedCity.getId()))
                .find(County.class);
        if (countyList.size() > 0) {
            dataList.clear();
            for (County county : countyList) {
                dataList.add(county.getCountyName());
            }
            adapter.notifyDataSetChanged();
            listView.setSelection(0);
            currentLevel = LEVEL_COUNTY;
        } else {
            int provinceCode = selectedProvince.getProvinceCode();
            int cityCode = selectedCity.getCityCode();
            String address = "http://guolin.tech/api/china/" + provinceCode + "/" + cityCode;
            queryFromServer(address, "county");
        }
    }
    /**
     * 根据传入的地址和类型从服务器中查询省市县数据
     */
    private void queryFromServer(String address, final String type) {
        showProgressDialog();
        HttpUtil.sendOkHttpRequest(address, new Callback() {    // 向服务器发送请求
            @Override
            public void onFailure(okhttp3.Call call, IOException e) {   //处理加载失败的情况
                getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        closeProgressDialog();
                        Toast.makeText(getContext(), "加载失败", Toast.LENGTH_SHORT).show();
                    }
                });
            }
            @Override
            public void onResponse(okhttp3.Call call, Response response) throws IOException {
                // 接收响应的数据并做对应处理
                String responseText = response.body().string();
                boolean result = false;
                if ("province".equals(type)) {
                    result = Utility.handleProvinceResponse(responseText);
                } else if ("city".equals(type)) {
                    result = Utility.handleCityResponse(responseText, selectedProvince.getId());
                } else if ("county".equals(type)) {
                    result = Utility.handleCountyResponse(responseText, selectedCity.getId());
                }
                if (result) {
                    getActivity().runOnUiThread(new Runnable() {    // 从子线程切换到主线程
                        @Override
                        public void run() {
                            closeProgressDialog();
                            if ("province".equals(type)) {
                                queryProvinces();   // 重新加载数据
                            } else if ("city".equals(type)) {
                                queryCities();
                            } else if ("county".equals(type)) {
                                queryCounties();
                            }
                        }
                    });
                }
            }
        });
    }
    /**
     * 显示进度对话框
     */
    private void showProgressDialog() {
        if (progressDialog == null) {
            progressDialog = new ProgressDialog(getActivity());
            progressDialog.setMessage("正在加载...");
            progressDialog.setCanceledOnTouchOutside(false);
        }
    }
    /**
     * 关闭进度对话框
     */
    private void closeProgressDialog() {
        if (progressDialog != null) {
            progressDialog.dismiss();
        }
    }
}
这里代码看似很多，但是并不复杂，逻辑关系比较清晰，注释里已经有详细介绍。主要实现的功能是当点击了某个省的时候会进入 ListView 的 onItemClick()  方法中，这时候会根据当前的视图级别来判断调用的 query 方法是哪一个。当点击返回按钮时，会对当前 ListView 的列表级别进行判断。对应地返回上一级列表（省级的返回按钮是隐藏的）。

将碎片添加至界面
上一部分已经完成了遍历全国省市县的碎片，但是碎片是无法直接显示在界面上的。还需要将其添加到活动里。

首先要修改 activity_main.xml 中的代码，如下所示：

<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">
    <!-- 添加碎片并使其充满整个布局 -->
    <fragment
        android:id="@+id/choose_area_fragment"
        android:name="com.coolweather.android.ChooseAreaFragment"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />
</FrameLayout>
以上代码定义了一个 FrameLayout ，然后将 ChooseAreaFragment 添加进来并使其充满整个布局。

另外，之前在碎片的布局里已经定义了一个标题栏，所以需要关掉原生的 ActionBar 。修改 res/values/styles.xml 中的代码，将这一行：

<style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
修改为：

<style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">
最后，由于郭霖老师提供的服务器所用协议还是 http 协议，但是从 Android 6.0 开始引入了对 Https 的推荐支持，而到了　Android 9.0 的系统上面默认所有 Http 的请求都无法响应。所以需要手动解决一下这个问题，在　AndroidManifest.xml 的 application 下添加一行代码(注意写在后面的尖括号内)：

android:usesCleartextTraffic=“true”

